/* Generated By:JJTree&JavaCC: Do not edit this line. JSONParserConstants.java */
/*
 * This software is licensed under the terms of the ISC License.
 * (ISCL http://www.opensource.org/licenses/isc-license.txt
 * It is functionally equivalent to the 2-clause BSD licence,
 * with language "made unnecessary by the Berne convention" removed).
 * 
 * Copyright (c) 2011, Mike Norman
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
 * USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */
package org.mwnorman.json;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface JSONParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_LINE = 6;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 7;
  /** RegularExpression Id. */
  int K_TRUE = 8;
  /** RegularExpression Id. */
  int K_FALSE = 9;
  /** RegularExpression Id. */
  int K_NULL = 10;
  /** RegularExpression Id. */
  int O_OPENBRACE = 11;
  /** RegularExpression Id. */
  int O_CLOSEBRACE = 12;
  /** RegularExpression Id. */
  int O_OPENBRACKET = 13;
  /** RegularExpression Id. */
  int O_CLOSEBRACKET = 14;
  /** RegularExpression Id. */
  int O_COMMA = 15;
  /** RegularExpression Id. */
  int O_COLON = 16;
  /** RegularExpression Id. */
  int O_DOT = 17;
  /** RegularExpression Id. */
  int O_PLUS = 18;
  /** RegularExpression Id. */
  int O_MINUS = 19;
  /** RegularExpression Id. */
  int DIGIT = 20;
  /** RegularExpression Id. */
  int NONZERO_DIGIT = 21;
  /** RegularExpression Id. */
  int EXP = 22;
  /** RegularExpression Id. */
  int NUMBER = 23;
  /** RegularExpression Id. */
  int INTEGER = 24;
  /** RegularExpression Id. */
  int FRACTIONAL_DIGITS = 25;
  /** RegularExpression Id. */
  int EXPONENT = 26;
  /** RegularExpression Id. */
  int DIGITS = 27;
  /** RegularExpression Id. */
  int STRING = 28;
  /** RegularExpression Id. */
  int ALLOWABLE_CHARACTERS = 29;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<COMMENT_LINE>",
    "<COMMENT_BLOCK>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "<DIGIT>",
    "<NONZERO_DIGIT>",
    "<EXP>",
    "<NUMBER>",
    "<INTEGER>",
    "<FRACTIONAL_DIGITS>",
    "<EXPONENT>",
    "<DIGITS>",
    "<STRING>",
    "<ALLOWABLE_CHARACTERS>",
  };

}
