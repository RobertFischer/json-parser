/* Generated By:JJTree&JavaCC: Do not edit this line. JSONParserConstants.java */
/*
 * This software is licensed under the terms of the ISC License.
 * (ISCL http://www.opensource.org/licenses/isc-license.txt
 * It is functionally equivalent to the 2-clause BSD licence,
 * with language "made unnecessary by the Berne convention" removed).
 * 
 * Copyright (c) 2011, Mike Norman
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
 * USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * string escape logic (BSD license):
 * Copyright 2003-2008 MicroNova (R)
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of MicroNova nor the names of its contributors
 * may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/
package org.mwnorman.json;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface JSONParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT_C_STYLE = 6;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT_BASH_STYLE = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT_C_STYLE = 8;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT_HTML_STYLE = 9;
  /** RegularExpression Id. */
  int K_TRUE = 10;
  /** RegularExpression Id. */
  int K_FALSE = 11;
  /** RegularExpression Id. */
  int K_NULL = 12;
  /** RegularExpression Id. */
  int O_OPENBRACE = 13;
  /** RegularExpression Id. */
  int O_CLOSEBRACE = 14;
  /** RegularExpression Id. */
  int O_OPENBRACKET = 15;
  /** RegularExpression Id. */
  int O_CLOSEBRACKET = 16;
  /** RegularExpression Id. */
  int O_COMMA = 17;
  /** RegularExpression Id. */
  int O_COLON = 18;
  /** RegularExpression Id. */
  int O_DOT = 19;
  /** RegularExpression Id. */
  int O_PLUS = 20;
  /** RegularExpression Id. */
  int O_MINUS = 21;
  /** RegularExpression Id. */
  int DIGIT = 22;
  /** RegularExpression Id. */
  int NONZERO_DIGIT = 23;
  /** RegularExpression Id. */
  int EXP = 24;
  /** RegularExpression Id. */
  int NUMBER = 25;
  /** RegularExpression Id. */
  int INTEGER = 26;
  /** RegularExpression Id. */
  int FRACTIONAL_DIGITS = 27;
  /** RegularExpression Id. */
  int EXPONENT = 28;
  /** RegularExpression Id. */
  int DIGITS = 29;
  /** RegularExpression Id. */
  int SINGLE_QUOTED_STRING = 30;
  /** RegularExpression Id. */
  int QUOTED_STRING = 31;
  /** RegularExpression Id. */
  int UNQUOTED_STRING = 32;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT_C_STYLE>",
    "<SINGLE_LINE_COMMENT_BASH_STYLE>",
    "<MULTI_LINE_COMMENT_C_STYLE>",
    "<MULTI_LINE_COMMENT_HTML_STYLE>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "\"+\"",
    "\"-\"",
    "<DIGIT>",
    "<NONZERO_DIGIT>",
    "<EXP>",
    "<NUMBER>",
    "<INTEGER>",
    "<FRACTIONAL_DIGITS>",
    "<EXPONENT>",
    "<DIGITS>",
    "<SINGLE_QUOTED_STRING>",
    "<QUOTED_STRING>",
    "<UNQUOTED_STRING>",
  };

}
