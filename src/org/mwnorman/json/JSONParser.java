/* Generated By:JJTree&JavaCC: Do not edit this line. JSONParser.java */
/*
 * This software is licensed under the terms of the ISC License.
 * (ISCL http://www.opensource.org/licenses/isc-license.txt
 * It is functionally equivalent to the 2-clause BSD licence,
 * with language "made unnecessary by the Berne convention" removed).
 * 
 * Copyright (c) 2011, Mike Norman
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
 * USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * string escape logic (BSD license):
 * Copyright 2003-2008 MicroNova (R)
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of MicroNova nor the names of its contributors
 * may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/
package org.mwnorman.json;

//javase imports
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@SuppressWarnings("all")
public class JSONParser/*@bgen(jjtree)*/implements JSONParserTreeConstants, JSONParserConstants {/*@bgen(jjtree)*/
  protected JJTJSONParserState jjtree = new JJTJSONParserState();
    public JSONParser() {
        super();
    }

  final public Object parse() throws ParseException {
 /*@bgen(jjtree) parse */
SimpleNode jjtn000 = new SimpleNode(JJTPARSE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Object o = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_OPENBRACE:
        o = object();
        break;
      case O_OPENBRACKET:
        o = array();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return o;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Object object() throws ParseException {
 /*@bgen(jjtree) object */
SimpleNode jjtn000 = new SimpleNode(JJTOBJECT);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Map<String, Object> m = new LinkedHashMap<String, Object>();
    try {
      jj_consume_token(O_OPENBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLE_QUOTED_STRING:
      case QUOTED_STRING:
      case UNQUOTED_STRING:
        members(m);
        break;
      default:
        ;
      }
      jj_consume_token(O_CLOSEBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return m;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void members(Map<String, Object> m) throws ParseException {
 /*@bgen(jjtree) members */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      pair(m);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        jj_consume_token(O_COMMA);
        members(m);
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void pair(Map<String, Object> m) throws ParseException {
 /*@bgen(jjtree) pair */
SimpleNode jjtn000 = new SimpleNode(JJTPAIR);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t = null;
Object o;
String fieldName = null;
    try {
      fieldName = fieldName();
      jj_consume_token(O_COLON);
      o = value();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        m.put(fieldName, o);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public String fieldName() throws ParseException {
 /*@bgen(jjtree) fieldName */
SimpleNode jjtn000 = new SimpleNode(JJTFIELDNAME);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);String fieldName = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLE_QUOTED_STRING:
        jj_consume_token(SINGLE_QUOTED_STRING);
          fieldName = stripOffQuotes(decodeBackslash(token.image));
        break;
      case QUOTED_STRING:
        jj_consume_token(QUOTED_STRING);
          fieldName = stripOffQuotes(decodeBackslash(token.image));
        break;
      case UNQUOTED_STRING:
        jj_consume_token(UNQUOTED_STRING);
          fieldName = decodeBackslash(token.image);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return fieldName;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  String stripOffQuotes(String quotedString) throws ParseException {
                                            /*@bgen(jjtree) stripOffQuotes */
 SimpleNode jjtn000 = new SimpleNode(JJTSTRIPOFFQUOTES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {if (!(quotedString.startsWith("\u005c"") || quotedString.startsWith("'"))) {
        return quotedString;
    }
    return quotedString.substring(1, quotedString.length() - 1);/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  String decodeBackslash(String s) throws ParseException {
                                  /*@bgen(jjtree) decodeBackslash */
 SimpleNode jjtn000 = new SimpleNode(JJTDECODEBACKSLASH);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {StringBuilder sb = new StringBuilder();
    int inputLength = s.length();
    boolean isAfterSlash = false;
    for (int i = 0; i < inputLength; i ++) {
        char c = s.charAt(i);
        if (c == '\u005c\u005c') {
            if (!isAfterSlash) {
                isAfterSlash = true;
            }
            else {
                sb.append(c);
                isAfterSlash = false;
            }
        }
        else {
            if (isAfterSlash) {
                switch (c) {
                    case 'n':
                        sb.append('\u005cn');
                    break;
                    case 'r':
                        sb.append('\u005cr');
                    break;
                    case 't':
                        sb.append('\u005ct');
                    break;
                    case 'b':
                        sb.append('\u005cb');
                    break;
                    case 'f':
                        sb.append('\u005cf');
                    break;
                    case '\u005c'':
                        sb.append('\u005c'');
                    break;
                    case '/':
                        sb.append('/');
                    break;
                    case '\u005c"':
                        sb.append('\u005c"');
                    break;
                    //handle Unicode-escaping
                    case 'u':
                        int u = Integer.parseInt(s.substring(i + 1, i + 5), 16);
                        sb.append((char)u);
                        i += 4;
                    break;
                }
                isAfterSlash = false;
            }
            else {
                sb.append(c);
            }
        }
    }
    return sb.toString();/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
  }

  final public Object array() throws ParseException {
 /*@bgen(jjtree) array */
SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);List<Object> a=new ArrayList<Object>();
    try {
      jj_consume_token(O_OPENBRACKET);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TRUE:
      case K_FALSE:
      case K_NULL:
      case O_OPENBRACE:
      case O_OPENBRACKET:
      case NUMBER:
      case SINGLE_QUOTED_STRING:
      case QUOTED_STRING:
        elements(a);
        break;
      default:
        ;
      }
      jj_consume_token(O_CLOSEBRACKET);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        Collections.reverse(a);
        {if (true) return a;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void elements(List<Object> a) throws ParseException {
 /*@bgen(jjtree) elements */
SimpleNode jjtn000 = new SimpleNode(JJTELEMENTS);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Object o = null;
    try {
      o = value();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_COMMA:
        jj_consume_token(O_COMMA);
        elements(a);
        break;
      default:
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        a.add(o);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public Object value() throws ParseException {
 /*@bgen(jjtree) value */
SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);Token t = null;
Object o = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_OPENBRACE:
        o = object();
        break;
      case O_OPENBRACKET:
        o = array();
        break;
      case SINGLE_QUOTED_STRING:
        t = jj_consume_token(SINGLE_QUOTED_STRING);
                                  o = stripOffQuotes(decodeBackslash(t.image));
        break;
      case QUOTED_STRING:
        t = jj_consume_token(QUOTED_STRING);
                           o = stripOffQuotes(decodeBackslash(t.image));
        break;
      case NUMBER:
        t = jj_consume_token(NUMBER);
            try {
              o = Integer.valueOf(t.image);

            }
            catch (NumberFormatException nfe1) {
                try {
                    o = Long.valueOf(t.image);
                }
                catch (NumberFormatException nfe2) {
                    try {
                        o = Float.valueOf(t.image);
                    }
                    catch (NumberFormatException nfe3) {
                        try {
                            o = Double.valueOf(t.image);
                        }
                        catch  (NumberFormatException nfe4) {
                            o = Double.NaN;
                        }
                    }
                }

            }
        break;
      case K_TRUE:
        jj_consume_token(K_TRUE);
                  o = Boolean.TRUE;
        break;
      case K_FALSE:
        jj_consume_token(K_FALSE);
                   o = Boolean.TRUE;
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
        {if (true) return o;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public JSONParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;

  /** Constructor with InputStream. */
  public JSONParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSONParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public JSONParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public JSONParser(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
