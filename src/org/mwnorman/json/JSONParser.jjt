/*
 * This software is licensed under the terms of the ISC License.
 * (ISCL http://www.opensource.org/licenses/isc-license.txt
 * It is functionally equivalent to the 2-clause BSD licence,
 * with language "made unnecessary by the Berne convention" removed).
 * 
 * Copyright (c) 2011, Mike Norman
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
 * USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * string escape logic (BSD license):
 * Copyright 2003-2008 MicroNova (R)
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of MicroNova nor the names of its contributors
 * may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/
options {
      STATIC = false;
      SUPPORT_CLASS_VISIBILITY_PUBLIC = true;
      ERROR_REPORTING = false;
      JAVA_UNICODE_ESCAPE = true;
      UNICODE_INPUT = true;
      NODE_USES_PARSER = false;
      VISITOR = false;
}

PARSER_BEGIN(JSONParser)
/*
 * This software is licensed under the terms of the ISC License.
 * (ISCL http://www.opensource.org/licenses/isc-license.txt
 * It is functionally equivalent to the 2-clause BSD licence,
 * with language "made unnecessary by the Berne convention" removed).
 * 
 * Copyright (c) 2011, Mike Norman
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
 * USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * string escape logic (BSD license):
 * Copyright 2003-2008 MicroNova (R)
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 *
 * Neither the name of MicroNova nor the names of its contributors
 * may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ******************************************************************************/
package org.mwnorman.json;

//javase imports
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

public class JSONParser {

    public JSONParser() {
        super();
    }
}

PARSER_END(JSONParser)

// Pls see http://www.ietf.org/rfc/rfc4627.txt for JSON spec details

// white space 
SKIP: {
        " "
    |   "\t"
    |   "\n"
    |   "\r"
    |   "\f"
    // comments: not really part of JSON spec, but parser shouldn't blow-up if present    
    |   <SINGLE_LINE_COMMENT_C_STYLE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>   
    |   <SINGLE_LINE_COMMENT_BASH_STYLE: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
    |   <MULTI_LINE_COMMENT_C_STYLE: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
    |   <MULTI_LINE_COMMENT_HTML_STYLE: "<!--" (~["-"])* "-" ("-" | (~["-",">"] (~["-"])* "-"))* ">">
}

// JSON reserved keywords (prefix with K_ to avoid naming conflicts): only lower case allowed!
TOKEN: {
        <K_TRUE: "true">
    |   <K_FALSE: "false">
    |   <K_NULL: "null">
}

// JSON operators (prefix with O_ to avoid naming conflicts)
TOKEN: {
        <O_OPENBRACE: "{">
    |   <O_CLOSEBRACE: "}">
    |   <O_OPENBRACKET: "[">
    |   <O_CLOSEBRACKET: "]">
    |   <O_COMMA: ",">
    |   <O_COLON: ":">
    |   <O_DOT: ".">
    |   <O_PLUS: "+">
    |   <O_MINUS: "-">  
}

// numeric literals
TOKEN: {
        <#DIGIT: ["0" - "9"] >
    |   <#NONZERO_DIGIT: ["1" - "9"] >
    |   <#EXP: ["e", "E"] ( <O_PLUS > | <O_MINUS > )? >
}
// JSON numbers do not support octal or hexadecimal formats
TOKEN: {
  
        <NUMBER:  <INTEGER> | <INTEGER> <FRACTIONAL_DIGITS> | <INTEGER> <EXPONENT> | <INTEGER> <FRACTIONAL_DIGITS> <EXPONENT> >
    |   <INTEGER: (<O_MINUS>)? ( <DIGIT> | <NONZERO_DIGIT> <DIGITS>) >
    |   <FRACTIONAL_DIGITS: <O_DOT> <DIGITS > >
    |   <EXPONENT: <EXP> <DIGITS> >
    |   <DIGITS: ( <DIGIT> )+ >
}

// string literals
TOKEN: {
        <SINGLE_QUOTED_STRING: ["'"](~["'"]|"\\'")*["'"]>
    |   <QUOTED_STRING: ["\""](~["\""]|"\\\"")*["\""]>
    |   <UNQUOTED_STRING: (~[" ","\r","\n","\t","{","}","[","]",",",":","\"","'"])+>
}

Object parse():
{
Object o = null;
}
{
    ( o=object() | o=array() )
    {
        return o;
    }
}

Object object():
{
Map<String, Object> m = new LinkedHashMap<String, Object>();
}
{
    <O_OPENBRACE> ( members(m) )? <O_CLOSEBRACE>
    {
        return m;
    }
}

void members(Map<String, Object> m):
{
}
{
    pair(m) [ <O_COMMA> members(m) ]
}

void pair(Map<String, Object> m):
{
Token t = null;
Object o;
String fieldName = null;
}
{
    fieldName=fieldName() <O_COLON> o=value()
    {
        m.put(fieldName, o);
    }
}

String fieldName():
{
String fieldName = null;
}
{
    (
      <SINGLE_QUOTED_STRING>
        {
          fieldName = stripOffQuotes(decodeBackslash(token.image));
        }
      |
      <QUOTED_STRING>
        {
          fieldName = stripOffQuotes(decodeBackslash(token.image));
        }
      |
      <UNQUOTED_STRING>
        {
          fieldName = decodeBackslash(token.image);
        }
    )
    {
      return fieldName;
    }
}

JAVACODE
String stripOffQuotes(String quotedString) {
    if (!(quotedString.startsWith("\"") || quotedString.startsWith("'"))) {
        return quotedString;
    }
    return quotedString.substring(1, quotedString.length() - 1);
}

JAVACODE
String decodeBackslash(String s) {
    StringBuilder sb = new StringBuilder();
    int inputLength = s.length();
    boolean isAfterSlash = false;
    for (int i = 0; i < inputLength; i ++) {
        char c = s.charAt(i);
        if (c == '\\') {
            if (!isAfterSlash) {
                isAfterSlash = true;
            }
            else {
                sb.append(c);
                isAfterSlash = false;
            }
        }
        else {
            if (isAfterSlash) {
                switch (c) {
                    case 'n':
                        sb.append('\n');
                    break;
                    case 'r':
                        sb.append('\r');
                    break;
                    case 't':
                        sb.append('\t');
                    break;
                    case 'b':
                        sb.append('\b');
                    break;
                    case 'f':
                        sb.append('\f');
                    break;
                    case '\'':
                        sb.append('\'');
                    break;
                    case '/':
                        sb.append('/');
                    break;
                    case '\"':
                        sb.append('\"');
                    break;
                    //handle Unicode-escaping
                    case 'u':
                        int u = Integer.parseInt(s.substring(i + 1, i + 5), 16);
                        sb.append((char)u);
                        i += 4;
                    break;
                }
                isAfterSlash = false;
            }
            else {
                sb.append(c);
            }                        
        }
    }
    return sb.toString();
}

Object array():
{
List<Object> a=new ArrayList<Object>();
}
{
    <O_OPENBRACKET> ( elements(a) )? <O_CLOSEBRACKET>
    {
        Collections.reverse(a);
        return a;
    }
}

void elements(List<Object> a):
{
Object o = null;
}
{
    o=value() [ <O_COMMA> elements(a) ]
    {
        a.add(o);
    }
}

Object value():
{
Token t = null;
Object o = null;
}
{
    (   o=object()
    |   o=array()
    |   t=<SINGLE_QUOTED_STRING> {o = stripOffQuotes(decodeBackslash(t.image));}
    |   t=<QUOTED_STRING> {o = stripOffQuotes(decodeBackslash(t.image));}    
    |   t=<NUMBER>
        {
            try {
              o = Integer.valueOf(t.image);
            }
            catch (NumberFormatException nfe1) {
                try {
                    o = Long.valueOf(t.image);
                }
                catch (NumberFormatException nfe2) {
                    try {
                        o = Float.valueOf(t.image);
                    }
                    catch (NumberFormatException nfe3) {
                        try {
                            o = Double.valueOf(t.image);
                        }
                        catch  (NumberFormatException nfe4) {
                            o = Double.NaN;
                        }
                    }
                }
            }
        }
    |   <K_TRUE> {o = Boolean.TRUE;}
    |   <K_FALSE> {o = Boolean.TRUE;}
    |   <K_NULL> )
    {
        return o;
    }
}